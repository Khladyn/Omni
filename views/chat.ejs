
<div class="container-fluid h-100">
    <div class="row" style="height: calc(100vh - 12rem);">
      <!-- Chat List -->
      <div class="col-md-4 col-lg-3 d-flex flex-column h-100">
        <h4 class="text-white mb-3">
          <span class="material-icons text-white align-bottom me-1">chat</span>
          Chats
        </h4>
        <ul class="list-group flex-grow-1 overflow-auto" style="max-height: 100%;">
          <% chats.forEach(chat => { %>
          <li class="list-group-item list-group-item-action" onclick="showChat('<%= chat.contact_info %>')">
            <%= chat.username %>
          </li>
          <% }) %>
        </ul>
      </div>
  
      <!-- Expanded Chat -->
      <div class="col-md-8 col-lg-9 d-flex flex-column h-100 justify-content-end">
        <div id="chatContainer" class="d-flex flex-column overflow-auto">
            <!-- Search bar -->
            <div class="search-bar p-2">
                <input type="text" class="form-control" placeholder="Enter username">
            </div>

        </div>
            <!-- Chat messages will be dynamically loaded here -->
            <emoji-picker id="emojiPicker" style="display: none; margin-bottom: 4em; right: 3em"></emoji-picker>
                    <!-- <div id="recordingsList"></div> -->

        <!-- INPUT FIELDS -->
        <div class="input-group mt-3">
            <input type="text" class="form-control" placeholder="Type a message" id="messageInput">
    
            <!-- Emoji keyboard -->
            <button class="btn btn-light" type="button" id="emojiButton">
                <i class="material-icons align-bottom py-1">sentiment_satisfied</i>
            </button>
    
            <!-- File input field styled as a button -->
            <label class="btn btn-light" for="fileInput" id="attachButton" 
            data-bs-toggle="tooltip" data-bs-placement="top" title="No file selected">
         <i class="material-icons align-bottom py-1">attach_file</i>
     </label>
     <input type="file" id="fileInput" class="d-none" multiple>
     
    
            <!-- Voice recorder -->
            <button class="btn btn-light" type="button" id="voiceButton">
                <i class="material-icons align-bottom py-1">mic</i>
            </button>
    
            <!-- Camera Capture Button -->
            <button class="btn btn-light" type="button" id="cameraButton" data-toggle="modal" data-target="#cameraModal">
                <i class="material-icons align-bottom py-1">photo_camera</i>
            </button>
    
            <button class="btn btn-primary" type="button" id="sendButton">
                Send
                <span class="material-icons align-bottom ms-1">send</span>
            </button>
        </div>
    </div>
    
      
    </div>
    
    <!-- Camera Modal -->
    <div class="modal fade" id="cameraModal" tabindex="-1" role="dialog" aria-labelledby="cameraModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cameraModalLabel">Camera</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body d-flex justify-content-center align-items-center">

                    <!-- Video element to show camera feed -->
                    <video id="cameraStream" autoplay style="width: 100%; margin-top: 20px; max-height: 65vh;"></video>

                    <!-- Canvas to display captured photo -->
                    <canvas id="photoCanvas" style="display: none; margin-top: 20px; max-height: 65vh;"></canvas>

                    <!-- Video element to show recorded video -->
                    <video id="recordedVideo" controls style="display: none; width: 100%; margin-top: 20px; max-height: 65vh;"></video>
                </div>
                <div class="modal-footer">
                    <!-- Capture Photo Button -->
                    <button class="btn btn-success btn-sm" type="button" id="captureButton">
                        <i class="material-icons align-bottom py-1">camera_alt</i>
                    </button>

                    <!-- Record Video Button -->
                    <button class="btn btn-primary btn-sm" type="button" id="recordButton">
                        <i class="material-icons align-bottom py-1">videocam</i>
                    </button>

                    <!-- Stop Recording Button -->
                    <button class="btn btn-danger btn-sm" type="button" id="stopButton" style="display: none;">
                        <i class="material-icons align-bottom py-1">stop</i>
                    </button>

                    <!-- Take New Button -->
                    <button class="btn btn-warning btn-sm" type="button" id="takeNewButton" style="display: none;">
                        <i class="material-icons align-bottom py-1">autorenew</i>
                    </button>
                    <button type="button" class="btn btn-secondary py-2" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>



  </div>  


  
  <script>
// function parseDate(dateStr) {
//   // Assuming dateStr is in the format 'HH:MM:SS.ssssss+08'
//   const [time, offset] = dateStr.split('+');
//   const [hours, minutes, seconds] = time.split(':');
//   const formattedTime = `${hours}:${minutes}:${seconds}`;

//   // Create a Date object from the current date and the parsed time
//   const now = new Date();
//   const date = new Date(`${now.toDateString()} ${formattedTime}`);

//   // Return the date as a local string
//   return date.toLocaleString();
// }

// Function to create the HTML content for a chat message
function createMessageHTML(msg) {
  // Start with the content of the message
  let content = `${msg.content}`;
  
  console.log("ATTACHMENTS: ", msg.attachment);
  
    // Check if there are attachments
    if (msg.attachment && Array.isArray(msg.attachment)) {
        msg.attachment.forEach(attachmentUrl => {
        // Determine the file type and create HTML accordingly
        const fileExtension = attachmentUrl.split('.').pop().toLowerCase();
        
        if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
        // Image file
        content += `<br><img src="${attachmentUrl}" alt="Attachment" style="max-width: 100%; height: auto;">`;
      } else if (['mp3', 'wav'].includes(fileExtension)) {
        // Audio file
        content += `<br><audio controls>
                      <source src="${attachmentUrl}" type="audio/${fileExtension}">
                      Your browser does not support the audio element.
                    </audio>`;
      } else if (['mp4', 'avi', 'mov'].includes(fileExtension)) {
        // Video file
        content += `<br><video controls style="max-width: 100%; height: auto;">
                      <source src="${attachmentUrl}" type="video/${fileExtension}">
                      Your browser does not support the video element.
                    </video>`;
      } else if (fileExtension === 'pdf') {
        // PDF file
        content += `<br><iframe src="${attachmentUrl}" style="width: 100%; height: 500px;" frameborder="0">This browser does not support PDFs. Please download the PDF to view it: <a href="${attachmentUrl}">Download PDF</a>.</iframe>`;
      } else {
        // For other file types, provide a link to download the file
        content += `<br><a href="${attachmentUrl}" download>Download attachment</a>`;
      }
    });
  }
  
  return content;
}


var newMessageId = 0;

function showChat(chatId) {
  // Clear previous chat messages
  const chatContainer = document.getElementById('chatContainer');
//   chatContainer.innerHTML = 'Loading...';
  chatContainer.classList.add('text-white');
  console.log("Chat called");
  var lastMessageId = 0;

  // Make AJAX request to fetch chat messages
  fetch(`/chat/${chatId}`)
    .then(response => response.json())
    .then(data => {
      chatContainer.innerHTML = ''; // Clear loading text

      // Render chat messages
      data.interactions.forEach(msg => {
        lastMessageId = msg.interaction_id;
        const messageElement = document.createElement('div');
        messageElement.className = 'message';

        // Create a timestamp element
        const timestampElement = document.createElement('div');
        timestampElement.className = 'timestamp';
        timestampElement.textContent = msg.date_created; // Use the parsing function
        timestampElement.style.display = 'none'; // Hide timestamp initially

        // Apply styles based on user ID
        if (msg.user_id === data.session_user_id) {
          messageElement.classList.add('message-right'); // Add a class for messages from the user
        } else {
          messageElement.classList.add('message-left'); // Add a class for messages from others
          document.getElementById('sendButton').setAttribute('data-contact-info', msg.user_id);
        }

        // Add message content and timestamp
        // messageElement.innerHTML = `${msg.content}`;
        messageElement.innerHTML = createMessageHTML(msg);
        
        messageElement.appendChild(timestampElement);

        // Add click event to show/hide the timestamp
        messageElement.addEventListener('click', () => {
          if (timestampElement.style.display === 'none') {
            timestampElement.style.display = 'block'; // Show timestamp
          } else {
            timestampElement.style.display = 'none'; // Hide timestamp
          }
        });

        chatContainer.appendChild(messageElement);
      });

      console.log("NM: ", newMessageId);
      console.log("LS: ", lastMessageId);

      if (newMessageId != lastMessageId) {
        // Scroll to the bottom of the chatContainer
        chatContainer.scrollTop = chatContainer.scrollHeight;
      }

      newMessageId = lastMessageId;

    })
    .catch(error => {
      console.error('Error loading chat:', error);
    //   chatContainer.innerHTML = 'Error loading chat messages.';
    });
}

setInterval(() => {
    const contactInfo = document.getElementById('sendButton').getAttribute('data-contact-info');
  showChat(contactInfo);
}, 2000);  // 2000 milliseconds = 2 seconds

// SEND BUTTON
// Event listener for the send button
document.getElementById('sendButton').addEventListener('click', () => {
  const contactInfo = document.getElementById('sendButton').getAttribute('data-contact-info');
  sendChat(contactInfo);
  console.log("SEND CLICKED", contactInfo);
});

function sendChat(contactInfo) {
  console.log("CONTACT INFO", contactInfo);
  
  // Retrieve the message from the input field
  const messageInput = document.getElementById('messageInput');
  const fileInput = document.getElementById('fileInput');
  const message = messageInput.value.trim();

  if (message === '' && fileInput.files.length === 0) {
    return; // Do nothing if both message and file are empty
  }

  // Prepare the data to send
  const formData = new FormData();
  formData.append('content', message);
  formData.append('contact_info', contactInfo); // Ensure it's a JSON string if it's an array

  // Append all selected files to the FormData
  Array.from(fileInput.files).forEach(file => {
    formData.append('attachments', file); // 'attachments' is the name for multiple files
  });

  // Send the message to the server
  fetch('/sendChat', {
    method: 'POST',
    body: formData
  })
  .then(response => response.json())
  .then(result => {
    if (result.success) {
      // Clear the input fields
      messageInput.value = '';
      fileInput.value = ''; // Clear the file input
      const attachButton = document.getElementById('attachButton');
      attachButton.classList.remove("btn-success");
      attachButton.classList.add("btn-light");

      // Create a new message element
      const chatContainer = document.getElementById('chatContainer');
      const messageElement = document.createElement('div');
      messageElement.className = 'message message-right'; // Add class for user messages

      // Create a timestamp element
      const timestampElement = document.createElement('div');
      timestampElement.className = 'timestamp';
      timestampElement.textContent = new Date().toISOString(); // Use current date/time
      timestampElement.style.display = 'none'; // Hide timestamp initially

      // Add message content and timestamp
      messageElement.innerHTML = `${message}`;
      messageElement.appendChild(timestampElement);

      // Add click event to show/hide the timestamp
      messageElement.addEventListener('click', () => {
        if (timestampElement.style.display === 'none') {
          timestampElement.style.display = 'block'; // Show timestamp
        } else {
          timestampElement.style.display = 'none'; // Hide timestamp
        }
      });

      // Append the new message to the chat container
      chatContainer.appendChild(messageElement);

      // Scroll to the bottom of the chat container to show the new message
      chatContainer.scrollTop = chatContainer.scrollHeight;

      console.log('Message sent and displayed successfully:', result);
    } else {
      // Handle error
      console.error('Error sending message:', result.message);
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
}



// function parseDate(dateStr) {
//   const [time, offset] = dateStr.split('+');
//   const [hours, minutes, seconds] = time.split(':');
//   const formattedTime = `${hours}:${minutes}:${seconds}`;

//   const now = new Date();
//   const date = new Date(`${now.toDateString()} ${formattedTime}`);

//   return date.toLocaleString();
// }

// function showChat(chatId) {
//   const chatContainer = document.getElementById('chatContainer');
//   chatContainer.innerHTML = 'Loading...';
//   chatContainer.classList.add('text-white');

//   let lastMessageTimestamp = 0; // Initialize with 0 for the first fetch
//   let pollingActive = true; // Flag to control polling

//   // Clear previous chat messages when a new chat is selected
//   chatContainer.innerHTML = '';

//   // Stop polling when switching chats
//   const stopPolling = () => {
//     pollingActive = false;
//   };

//   // Long polling to fetch chat messages
//   const fetchChatMessages = () => {
//     if (!pollingActive) return; // Stop fetching if polling is inactive

//     fetch(`/chat/${chatId}?lastMessageTimestamp=${lastMessageTimestamp}`)
//       .then(response => response.json())
//       .then(data => {
//         // Clear loading text if it's still there
//         if (chatContainer.innerHTML === 'Loading...') {
//           chatContainer.innerHTML = '';
//         }

//         // Only proceed if there are new interactions
//         if (data.interactions.length > 0) {
//           data.interactions.forEach(msg => {
//             const messageElement = document.createElement('div');
//             messageElement.className = 'message';

//             const timestampElement = document.createElement('div');
//             timestampElement.className = 'timestamp';
//             timestampElement.textContent = msg.date_created;
//             timestampElement.style.display = 'none';

//             // Set message alignment based on the user
//             if (msg.user_id === data.session_user_id) {
//               messageElement.classList.add('message-right');
//             } else {
//               messageElement.classList.add('message-left');
//               document.getElementById('sendButton').setAttribute('data-contact-info', msg.user_id);
//             }

//             messageElement.innerHTML = `${msg.content}`;
//             messageElement.appendChild(timestampElement);

//             // Toggle timestamp display on click
//             messageElement.addEventListener('click', () => {
//               timestampElement.style.display = timestampElement.style.display === 'none' ? 'block' : 'none';
//             });

//             chatContainer.appendChild(messageElement);

//             // Update the lastMessageTimestamp to the most recent message's timestamp
//             lastMessageTimestamp = new Date(msg.date_created).getTime() / 1000;
//           });

//           // Scroll to the bottom of the chatContainer
//           chatContainer.scrollTop = chatContainer.scrollHeight;
//         }

//         // Start the next long poll request after a small delay
//         setTimeout(fetchChatMessages, 2000);
//       })
//       .catch(error => {
//         console.error('Error loading chat:', error);
//         chatContainer.innerHTML = 'Error loading chat messages. Retrying...';
//         setTimeout(fetchChatMessages, 2000); // Retry after 2 seconds
//       });
//   };

//   // Start the first fetch
//   fetchChatMessages();

//   // Return a function to stop polling if needed
//   return stopPolling;
// }



// // SEND BUTTON
// document.getElementById('sendButton').addEventListener('click', () => {
//   const contactInfo = document.getElementById('sendButton').getAttribute('data-contact-info');
//   sendChat(contactInfo);
//   console.log("SEND CLICKED", contactInfo);
// });

// function sendChat(contactInfo) {
//   const messageInput = document.getElementById('messageInput');
//   const message = messageInput.value.trim();

//   if (message === '') {
//     return;
//   }

//   const data = {
//     content: message,
//     contact_info: contactInfo
//   };

//   fetch('/sendChat', {
//     method: 'POST',
//     headers: {
//       'Content-Type': 'application/json'
//     },
//     body: JSON.stringify(data)
//   })
//   .then(response => response.json())
//   .then(result => {
//     if (result.success) {
//       messageInput.value = '';

//       // Optionally, you can handle displaying the sent message here
//       // Or it will be displayed when fetched in the next long poll
//       console.log('Message sent successfully:', result);
//     } else {
//       console.error('Error sending message:', result.message);
//     }
//   })
//   .catch(error => {
//     console.error('Error:', error);
//   });
// }
  </script>
  
  <script>
        document.addEventListener('DOMContentLoaded', () => {
            const emojiButton = document.getElementById('emojiButton');
            const emojiPicker = document.getElementById('emojiPicker');
            const messageInput = document.getElementById('messageInput');

            emojiButton.addEventListener('click', () => {
                // Toggle the display property of the emoji picker
                emojiPicker.style.display = emojiPicker.style.display === 'none' ? 'block' : 'none';
                console.log("EMOJI");
            });

            // Event listener for when an emoji is selected
            emojiPicker.addEventListener('emoji-click', (event) => {
                // Append the selected emoji to the input field
                messageInput.value += event.detail.unicode; // Use the detail provided by the event
                // Hide the emoji picker after selection
            });
        });
  </script>

  <script>
let mediaRecorder;
let audioChunks = [];
const voiceButton = document.getElementById('voiceButton');
const recordingsList = document.getElementById('recordingsList');
let audioStream; // Variable to hold the audio stream

voiceButton.onclick = async () => {
    if (!mediaRecorder || mediaRecorder.state === 'inactive') {
        await startRecording();
        voiceButton.innerHTML = '<i class="material-icons">stop</i>'; // Change icon to stop
    } else if (mediaRecorder.state === 'recording') {
        stopRecording();
        voiceButton.innerHTML = '<i class="material-icons">mic</i>'; // Change icon back to mic
    }
};

async function startRecording() {
    try {
        // Get audio stream from the microphone
        audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });
        console.log("Microphone access granted");

        mediaRecorder = new MediaRecorder(audioStream);

        mediaRecorder.ondataavailable = event => {
            audioChunks.push(event.data);
            console.log("Audio data available");
        };

        mediaRecorder.onstop = () => {
            console.log("Recording stopped");
            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            const listItem = document.createElement('div');
            listItem.innerHTML = `<audio controls src="${audioUrl}"></audio>`;
            // recordingsList.appendChild(listItem);
            audioChunks = []; // Reset audio chunks for the next recording

            // Stop all audio tracks when recording stops
            audioStream.getTracks().forEach(track => track.stop());
            console.log("Audio tracks stopped");
        };

        // Start recording
        mediaRecorder.start();
        console.log("Recording started");
    } catch (error) {
        console.error("Error accessing microphone: ", error);
        alert("Microphone access denied. Please allow access to use the voice recorder.");
    }
}

function stopRecording() {
    if (mediaRecorder && mediaRecorder.state === 'recording') {
        mediaRecorder.stop(); // Stop the recording
        console.log("Stopping recording...");
    }
}
  </script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const captureButton = document.getElementById('captureButton');
        const recordButton = document.getElementById('recordButton');
        const stopButton = document.getElementById('stopButton');
        const takeNewButton = document.getElementById('takeNewButton');
        const cameraStream = document.getElementById('cameraStream');
        const photoCanvas = document.getElementById('photoCanvas');
        const recordedVideo = document.getElementById('recordedVideo');
        const canvasContext = photoCanvas.getContext('2d');
        let stream;
        let mediaRecorder;
        let recordedChunks = [];

        // Start camera when modal is opened
        $('#cameraModal').on('shown.bs.modal', async function () {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                cameraStream.srcObject = stream;
                cameraStream.style.display = 'block'; // Show the video element
                takeNewButton.style.display = 'none'; // Hide the Take New button initially
            } catch (error) {
                console.error('Error accessing camera:', error);
            }
        });

        // Stop camera when modal is closed
        $('#cameraModal').on('hidden.bs.modal', function () {
            if (stream) {
                let tracks = stream.getTracks();
                tracks.forEach(track => track.stop());
                cameraStream.style.display = 'none'; // Hide the video element
                photoCanvas.style.display = 'none'; // Hide the photo canvas
                recordedVideo.style.display = 'none'; // Hide the recorded video
                stopButton.style.display = 'none'; // Hide the stop button
                takeNewButton.style.display = 'none'; // Hide the Take New button
                recordButton.style.display = 'block'; // Show the Record button again
                captureButton.style.display = 'block'; // Show the Capture button again
            }
        });

        // Capture photo on button click
        captureButton.addEventListener('click', () => {
            const width = cameraStream.videoWidth;
            const height = cameraStream.videoHeight;

            // Set canvas size to match the video stream dimensions
            photoCanvas.width = width;
            photoCanvas.height = height;

            // Draw the current video frame onto the canvas
            canvasContext.drawImage(cameraStream, 0, 0, width, height);

            // Show the captured photo
            photoCanvas.style.display = 'block';
            cameraStream.style.display = 'none'; // Hide the camera stream
            takeNewButton.style.display = 'block'; // Show the Take New button

            // Hide the capture and record buttons
            captureButton.style.display = 'none';
            recordButton.style.display = 'none';
        });

        // Start recording on button click
        recordButton.addEventListener('click', () => {
            recordedChunks = [];
            mediaRecorder = new MediaRecorder(stream);

            mediaRecorder.ondataavailable = function(event) {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = function() {
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                const videoURL = URL.createObjectURL(blob);
                recordedVideo.src = videoURL;
                recordedVideo.style.display = 'block'; // Show the recorded video
                cameraStream.style.display = 'none'; // Hide the camera stream
                takeNewButton.style.display = 'block'; // Show the Take New button

                // Hide the capture and record buttons
                captureButton.style.display = 'none';
                recordButton.style.display = 'none';
            };

            mediaRecorder.start();
            console.log('Recording started');
            stopButton.style.display = 'block';  // Show stop button
            recordButton.style.display = 'none'; // Hide record button
            captureButton.style.display = 'none'; // Hide capture button
        });

        // Stop recording on button click
        stopButton.addEventListener('click', () => {
            if (mediaRecorder) {
                mediaRecorder.stop();
                console.log('Recording stopped');
                stopButton.style.display = 'none';  // Hide stop button
            }
        });

        // Take new photo or video (reset the modal)
        takeNewButton.addEventListener('click', () => {
            photoCanvas.style.display = 'none'; // Hide the photo canvas
            recordedVideo.style.display = 'none'; // Hide the recorded video
            cameraStream.style.display = 'block'; // Show the camera stream
            takeNewButton.style.display = 'none'; // Hide the Take New button
            captureButton.style.display = 'block'; // Show the Capture button again
            recordButton.style.display = 'block'; // Show the Record button again
        });
    });
</script>

<script>
    document.getElementById('fileInput').addEventListener('change', function() {
        const attachButton = document.getElementById('attachButton');
        const files = this.files;

        if (files.length > 0) {
            // Create a comma-separated list of file names
            const fileNames = Array.from(files).map(file => file.name).join(', ');

            attachButton.classList.remove('btn-light');
            attachButton.classList.add('btn-success');
            attachButton.setAttribute('title', fileNames); // Update the title with the file names
        } else {
            attachButton.classList.remove('btn-success');
            attachButton.classList.add('btn-light');
            attachButton.setAttribute('title', 'No file selected'); // Reset the title text
        }
    });
    </script>