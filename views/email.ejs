<% if (error) { %>
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
      <div class="alert alert-danger" role="alert">
        <span class="material-icons align-bottom me-1">error</span>
        <%= error %>
      </div>
    </div>
  <% } %>
  <% if (success) { %>
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
      <div class="alert alert-success" role="alert">
        <span class="material-icons align-bottom me-1">check_circle</span>
        <%= success %>
      </div>
    </div>
  <% } %>

<div class="container-fluid h-100">
    <div class="row" style="height: calc(100vh - 12rem);">
        <!-- Chat List -->
        <div id="chatListContainer" class="col-md-4 col-lg-3 d-flex flex-column h-100">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4 class="text-white mb-0">
                    <span class="material-icons text-white align-bottom me-1">email</span>
                    Emails
                </h4>
                <span id="fetchEmail" class="material-icons text-white align-bottom ms-auto" role="button" title="Fetch emails">download</span>
                <span id="writeEmail" class="material-icons text-white align-bottom fs-3 ms-2" role="button" title="Write email">edit_note</span>

            </div>

            <ul id="emailList" class="list-group flex-grow-1 overflow-auto" style="max-height: 100%;">
                <!-- Email items will be dynamically added here -->
            </ul>
            
        </div>

        <!-- Resizer -->
        <div id="resizer" class="resizer"></div>

        <form id="emailForm" action="/sendEmail" method="POST" enctype="multipart/form-data">
        <!-- Expanded Chat -->
        <div id="chatContainerWrapper" class="col-md-8 col-lg-9 d-flex flex-column h-100 justify-content-end">

            <div id="searchBar" class="mb-auto pb-2">
                <!-- Recipient -->
                <div class="d-flex align-items-center mb-2">
                <span class="material-icons text-white align-bottom me-2">alternate_email</span>
                  <input type="email" name="to" id="recipient-input" class="form-control mb-2" placeholder="Enter recipient">
                </div>
                <!-- CC -->
                <div class="d-flex align-items-center mb-2">
                    <span class="material-icons text-white align-bottom me-2">file_copy</span>
                  <input type="text" name="cc" id="cc-input" class="form-control mb-2" placeholder="Enter CC">
                </div>
                <!-- BCC -->
                <div class="d-flex align-items-center mb-2">
                    <span class="material-icons text-white align-bottom me-2">copy_all</span>
                  <input type="text" name="bcc" id="bcc-input" class="form-control mb-2" placeholder="Enter BCC">
                </div>
                <!-- Subject -->
                <div class="d-flex align-items-center">
                    <span class="material-icons text-white align-bottom me-2">subject</span>
                  <input type="text" name="subject" id="subject-input" class="form-control mb-2" placeholder="Enter subject">
                </div>
              </div>
              

            <div id="chatContainer" class="d-flex flex-column overflow-auto">    
            </div>
            <!-- Chat messages will be dynamically loaded here -->
            <!-- <emoji-picker id="emojiPicker" style="display: none; margin-bottom: 4em; right: 3em"></emoji-picker> -->

            <!-- Rich Text Editor -->
            <!-- <textarea name="text" placeholder="Enter your message here" id="messageEditor" class="form-control rounded-bottom border" style="min-height: 100px;"></textarea> -->
            <div id="messageEditor" class="form-control rounded-bottom border overflow-auto" style="min-height: 100px;"></div>
            <input type="hidden" name="html" id="messageEditorInput">

            <!-- INPUT FIELDS -->
            <div class="input-group mt-3 justify-content-end">
                <!-- Emoji keyboard -->
                <!-- <button class="btn btn-light" type="button" id="emojiButton">
                    <i class="material-icons align-bottom py-1">sentiment_satisfied</i>
                </button> -->

                <!-- File input field styled as a button -->
                <label class="btn btn-light" for="fileInput" id="attachButton" 
                data-bs-toggle="tooltip" data-bs-placement="top" title="No file selected">
                <i class="material-icons align-bottom py-1">attach_file</i>
                </label>
                <input type="file" name="attachments" id="fileInput" class="d-none" multiple>

                <button class="btn btn-primary" id="sendButton" type="submit">
                    Send
                    <span id=sendButtonIcon class="material-icons align-bottom ms-1">send</span>
                </button>
            </div>

        </div>
    </form>
    </div>
</div>


<!-- Include Quill library -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script>

const toolbarOptions = [
  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
  ['blockquote', 'code-block'],
//   ['link', 'image', 'video', 'formula'],

  [{ 'header': 1 }, { 'header': 2 }],               // custom button values
  [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
  [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
  [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
  [{ 'direction': 'rtl' }],                         // text direction

  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
  [{ 'font': [] }],
  [{ 'align': [] }],

  ['clean']                                         // remove formatting button
];

  // Initialize Quill editor
  const quill = new Quill('#messageEditor', {
        modules: {
            toolbar: toolbarOptions
        },
        theme: 'snow'
    });


// Function to update the hidden input field with semantic HTML
function updateHiddenInput() {
  // Get semantic HTML from the editor
  const html = quill.root.innerHTML;
  // Update the hidden input field with the HTML content
  document.getElementById('messageEditorInput').value = html;
}

// Add an event listener to update hidden input field on content change
quill.on('text-change', updateHiddenInput);

// Optionally, update hidden input field on page load if there's pre-existing content
document.addEventListener('DOMContentLoaded', () => {
  updateHiddenInput();
});

const resizer = document.getElementById('resizer');
const leftPanel = document.getElementById('chatListContainer');
const rightPanel = document.getElementById('chatContainerWrapper');

resizer.addEventListener('mousedown', function(e) {
    document.body.style.userSelect = 'none'; // Disable text selection

    function onMouseMove(e) {
        const newLeftPanelWidth = e.clientX;
        const containerWidth = leftPanel.parentElement.offsetWidth;
        const rightPanelMinWidth = 300; // Minimum width for the right panel

        // Calculate the new width for the right panel
        const newRightPanelWidth = containerWidth - newLeftPanelWidth - resizer.offsetWidth;

        // Ensure that the right panel does not shrink below the minimum width
        if (newLeftPanelWidth > 150 && newRightPanelWidth > rightPanelMinWidth) {
            leftPanel.style.width = newLeftPanelWidth + 'px';
            rightPanel.style.width = newRightPanelWidth + 'px';
        }
    }

    function onMouseUp() {
        document.removeEventListener('mousemove', onMouseMove);
        document.removeEventListener('mouseup', onMouseUp);
        document.body.style.userSelect = ''; // Enable text selection
    }

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', onMouseUp);
});

// Function to handle file selection and update button styling
function handleFileSelection() {

    const fileInput = document.getElementById('fileInput'); // Ensure you have the correct ID
    const formData = new FormData();
    
    // Append all selected files to the FormData
    Array.from(fileInput.files).forEach(file => {
        formData.append('attachments', file); // 'attachments' is the name for multiple files
    });

    // Update button styling
    const attachButton = document.getElementById('attachButton');
    const files = fileInput.files; // Access files from the fileInput variable

    if (files.length > 0) {
        // Create a comma-separated list of file names
        const fileNames = Array.from(files).map(file => file.name).join(', ');

        attachButton.classList.remove('btn-light');
        attachButton.classList.add('btn-success');
        attachButton.setAttribute('title', fileNames); // Update the title with the file names
    } else {
        attachButton.classList.remove('btn-success');
        attachButton.classList.add('btn-light');
        attachButton.setAttribute('title', 'No file selected'); // Reset the title text
    }
}


// Function to fetch emails and populate the list
async function fetchEmails() {

    emailList.innerHTML = 'Loading...';
    emailList.style.color = 'white';    

    try {
        const response = await fetch('/fetchEmails'); // URL to your endpoint
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const emails = await response.json();

        console.log(emails);

        const emailList = document.getElementById('emailList');
        emailList.innerHTML = ''; // Clear previous content

        emails.forEach(async email => {
            // const parsedEmail = await fetchAndParseEmail(email.id);
            console.log(email);
            const listItem = document.createElement('li');
            listItem.className = 'list-group-item list-group-item-action';
            listItem.setAttribute('role', 'button');
            
            // Store email details in data attributes
            listItem.setAttribute('data-to', email.from || '');
            listItem.setAttribute('data-cc', email.cc || '');
            listItem.setAttribute('data-bcc', email.bcc || '');
            listItem.setAttribute('data-subject', email.subject || '');
            listItem.setAttribute('data-body', email.html || ''); // HTML content

            listItem.addEventListener('click', () => selectItem(listItem));

            listItem.innerHTML = `
                <strong>From:</strong> ${email.from}<br>
                <strong>Subject:</strong> ${email.subject}<br>
            `;

            emailList.appendChild(listItem);
        });
    } catch (error) {
        console.error('Error fetching emails:', error);
    }
}

// Function to select an email and populate the form fields
function selectItem(listItem) {
    // Extract email details from data attributes
    const to = listItem.getAttribute('data-to');
    const cc = listItem.getAttribute('data-cc');
    const bcc = listItem.getAttribute('data-bcc');
    const subject = listItem.getAttribute('data-subject');
    const bodyHtml = listItem.getAttribute('data-body'); // HTML content

    // Populate the form fields with email data
    document.getElementById('recipient-input').value = to || '';
    document.getElementById('cc-input').value = cc || '';
    document.getElementById('bcc-input').value = bcc || '';
    document.getElementById('subject-input').value = subject || '';
    // document.getElementById('messageEditor').innerHTML = bodyHtml || ''; // Use HTML content
    document.getElementById('messageEditorInput').value = bodyHtml || ''; // Use HTML content

    // quill.root.innerHTML = bodyHtml || '';
    // quill.setText(bodyHtml);
    quill.clipboard.dangerouslyPasteHTML(bodyHtml);

    const sendButton = document.getElementById('sendButton');

    // Update the button text while keeping the existing HTML structure
    sendButton.innerHTML = `
        Reply
        <span id="sendButtonIcon" class="material-icons align-bottom ms-1">reply</span>
    `;

    const form = document.getElementById('emailForm');
    form.action = '/replyEmail'; // Update the form action
    
}

// Fetch emails when the page loads
window.onload = fetchEmails;


// Function to handle file selection and update button styling
function handleFileSelection() {
    const fileInput = document.getElementById('fileInput'); // Ensure you have the correct ID
    const files = fileInput.files;
    const attachButton = document.getElementById('attachButton');

    if (files.length > 0) {
        // Create a comma-separated list of file names
        const fileNames = Array.from(files).map(file => file.name).join(', ');

        attachButton.classList.remove('btn-light');
        attachButton.classList.add('btn-success');
        attachButton.setAttribute('title', fileNames); // Update the title with the file names
    } else {
        attachButton.classList.remove('btn-success');
        attachButton.classList.add('btn-light');
        attachButton.setAttribute('title', 'No file selected'); // Reset the title text
    }
}

// Attach event listeners
document.getElementById('fetchEmail').addEventListener('click', fetchEmails);
document.getElementById('fileInput').addEventListener('change', handleFileSelection);

// Trigger email fetch on page load
document.addEventListener('DOMContentLoaded', fetchEmails);

// JavaScript to clear all input fields
document.getElementById('writeEmail').addEventListener('click', function() {

    const sendButton = document.getElementById('sendButton');

    // Update the button text while keeping the existing HTML structure
    sendButton.innerHTML = `
        Send
        <span id="sendButtonIcon" class="material-icons align-bottom ms-1">send</span>
    `;

    form.action = '/sendEmail'; // Update the form action

    // Select all input fields and textareas inside the form
    const form = document.getElementById('emailForm');
    const inputs = form.querySelectorAll('input, textarea');
    quill.deleteText(0, quill.getLength())
    // Clear the value of each input field and textarea
    inputs.forEach(input => {
        input.value = '';
    });
});


</script>
